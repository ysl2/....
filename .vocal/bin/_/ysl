#!/bin/bash

# Script for installing tmux on systems where you don't have root access.
# tmux will be installed in ${PREFIX}/bin.
# It's assumed that wget -c and a C/C++ compiler are installed.

# exit on error
set -e

PREFIX=$HOME/.vocal
TEMP_FOLDER=$HOME/Downloads/_

# create our directories
mkdir -p ${PREFIX} ${TEMP_FOLDER}


function _ERR () {
    echo "Bug here: $1"
}


function openssl () {
    [[ -e ${PREFIX}/lib64/pkgconfig/openssl.pc ]] || [[ -e ${PREFIX}/lib/pkgconfig/openssl.pc ]] && return

    cd ${TEMP_FOLDER}

    # OPENSSL_VERSION=3.1.0
    # OPENSSL_VERSION=1.1.1t
    OPENSSL_VERSION=$(ssh -V 2>&1 | awk '{ print $4 }')
    if [[ ${OPENSSL_VERSION:0:1} == '3' ]]; then
        OPENSSL_VERSION=openssl-${OPENSSL_VERSION}
    elif [[ ${OPENSSL_VERSION:0:1} == '1' ]]; then
        OPENSSL_VERSION=OpenSSL_${OPENSSL_VERSION//./_}
    fi

    [[ ! -e openssl ]] && git clone -b ${OPENSSL_VERSION} --depth=1 https://gitee.com/mirrors/openssl.git
    cd openssl
    ./config shared --prefix=${PREFIX} --openssldir=${PREFIX}/ssl
    make
    make install
    make clean
    cd ..
    [[ -e ${PREFIX}/ssl/certs ]] && rm -rf ${PREFIX}/ssl/certs
    ln -s /etc/ssl/certs ${PREFIX}/ssl/certs
}


function libevent () {
    [[ -e ${PREFIX}/lib/pkgconfig/libevent.pc ]] && return

    cd ${TEMP_FOLDER}

    # openssl

    LIBEVENT_VERSION=2.1.12-stable
    [[ ! -e libevent-${LIBEVENT_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/libevent/libevent/releases/download/release-${LIBEVENT_VERSION}/libevent-${LIBEVENT_VERSION}.tar.gz
    tar xvzf libevent-${LIBEVENT_VERSION}.tar.gz
    cd libevent-${LIBEVENT_VERSION}
    # Need to install pkg-config: sudo apt install pkg-config
    # ./configure PKG_CONFIG_PATH=${PREFIX}/lib64/pkgconfig --prefix=${PREFIX} --disable-shared
    ./configure \
        CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/openssl" \
        LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/lib64" \
        --prefix=${PREFIX}
    make
    make install
    make clean
}


function ncurses () {
    function _ncurses () {
        NCURSES_VERSION=$1

        [[ -e ${PREFIX}/lib/libncurses.so.${NCURSES_VERSION} ]] && [[ -e ${PREFIX}/lib/libncursesw.so.${NCURSES_VERSION} ]] && return

        cd ${TEMP_FOLDER}

        [[ ! -e ncurses-${NCURSES_VERSION}.tar.gz ]] && wget -c -O ncurses-${NCURSES_VERSION}.tar.gz https://ghproxy.com/https://github.com/mirror/ncurses/archive/refs/tags/v${NCURSES_VERSION}.tar.gz
        tar xvzf ncurses-${NCURSES_VERSION}.tar.gz
        cd ncurses-${NCURSES_VERSION}
        _CONFIGURE_COMMAND='./configure'
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND CPPFLAGS='-P'"
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --with-shared --with-termlib --prefix=${PREFIX}"
        # _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --disable-tic-depends --with-ticlib"
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --with-versioned-syms"
        if [[ ${1:0:1} == '5' ]]; then
            _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --without-cxx-binding"  # Ref: https://git.pengutronix.de/cgit/ptxdist/commit/?id=b6036e7ce2ce791087694ca19a771168ac7fc9f6
        fi
        if [[ ! -e ${PREFIX}/lib/libncurses.so.${NCURSES_VERSION} ]]; then
            CONFIGURE_COMMAND=$_CONFIGURE_COMMAND
            CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --disable-widec"
            eval "$CONFIGURE_COMMAND"
            make
            make install
            make clean
        fi
        if [[ ! -e ${PREFIX}/lib/libncursesw.so.${NCURSES_VERSION} ]]; then
            CONFIGURE_COMMAND=$_CONFIGURE_COMMAND
            CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --enable-widec"
            eval "$CONFIGURE_COMMAND"
            make
            make install
            make clean
        fi
    }

    # _ncurses 5.9
    _ncurses 6.4
}


function fuse () {
    [[ -e ${PREFIX}/lib/pkgconfig/fuse3.pc ]] && return

    cd ${TEMP_FOLDER}

    pip install meson ninja

    FUSE_VERSION=3.14.1
    [[ ! -e fuse-${FUSE_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/libfuse/libfuse/releases/download/fuse-${FUSE_VERSION}/fuse-${FUSE_VERSION}.tar.xz
    tar xvf fuse-${FUSE_VERSION}.tar.xz
    cd fuse-${FUSE_VERSION}
    mkdir build
    cd build
    meson setup .. \
        -Duseroot=false \
        -Dbindir=${PREFIX}/bin \
        -Ddatadir=${PREFIX}/share \
        -Dincludedir=${PREFIX}/include \
        -Dlibdir=${PREFIX}/lib \
        -Dmandir=${PREFIX}/share/man \
        -Dsbindir=${PREFIX}/sbin \
        -Dsysconfdir=${PREFIX}/etc \
        -Dudevrulesdir=${PREFIX}/lib/udev/rules.d \
        -Dinitscriptdir=
    ninja
    ninja install
}


function tmux () {
    [[ -e ${PREFIX}/bin/tmux ]] && return

    cd ${TEMP_FOLDER}

    libevent
    ncurses

    TMUX_VERSION=3.3a
    [[ ! -e tmux-${TMUX_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz
    tar xvzf tmux-${TMUX_VERSION}.tar.gz
    cd tmux-${TMUX_VERSION}
    # ./configure CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/include/ncurses -L${PREFIX}/include"
    # CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib" make
    ./configure \
        CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib " \
        --prefix=${PREFIX}
    make
    cp tmux ${PREFIX}/bin
    make clean
}


function ncdu () {
    [[ -e ${PREFIX}/bin/ncdu ]] && return

    cd ${TEMP_FOLDER}

    ncurses

    NCDU_VERSION=1.18.1
    [[ ! -e ncdu-${NCDU_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/ysl2/ncdu/releases/download/v${NCDU_VERSION}/ncdu-${NCDU_VERSION}.tar.gz
    tar xvzf ncdu-${NCDU_VERSION}.tar.gz
    cd ncdu-${NCDU_VERSION}
    ./configure \
        CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        CXXFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        LDFLAGS="-L${PREFIX}/lib -Wl,--no-as-needed -ltinfow" \
        --prefix=${PREFIX}
    make
    make install
    make clean
}


function lf () {
    [[ -e ${PREFIX}/bin/lf ]] && return

    cd ${TEMP_FOLDER}

    LF_VERSION=r28
    [[ ! -e lf-linux-amd64.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/gokcehan/lf/releases/download/${LF_VERSION}/lf-linux-amd64.tar.gz
    tar xvzf lf-linux-amd64.tar.gz
    mkdir -p ${PREFIX}/bin
    mv lf ${PREFIX}/bin
}


function htop () {
    [[ -e ${PREFIX}/bin/htop ]] && return

    cd ${TEMP_FOLDER}

    ncurses

    HTOP_VERSION=3.2.2
    [[ ! -e htop-${HTOP_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/htop-dev/htop/releases/download/${HTOP_VERSION}/htop-${HTOP_VERSION}.tar.xz
    tar xvf htop-${HTOP_VERSION}.tar.xz
    cd htop-${HTOP_VERSION}
    ./configure CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/include/ncurses -L${PREFIX}/include" --disable-unicode --prefix=${PREFIX}
    CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib" make
    make install
    make clean
}


function gcc8 () {
    _ERR gcc8
    return

    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/main/i/isl/libisl22_0.22.1-1_amd64.deb

    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libisl22_0.22.1-1_amd64.deb
    # sudo apt update
    # sudo apt install ./libisl22_0.22.1-1_amd64.deb ./libmpx2_8.4.0-3ubuntu2_amd64.deb ./cpp-8_8.4.0-3ubuntu2_amd64.deb ./libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb ./gcc-8-base_8.4.0-3ubuntu2_amd64.deb ./gcc-8_8.4.0-3ubuntu2_amd64.deb

    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/mpc-1.1.0.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/mpfr-4.0.2.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/gmp-6.1.2.tar.gz

    # binutils: https://mirrors.tuna.tsinghua.edu.cn/gnu/binutils/
    # gcc: https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/
    # gmp: https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/
    # mpfr: https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/
    # mpc: https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/
    # isl: https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/i/isl-0.18/

    # https://www.ivistang.com/articles/336/
}


function lazygit () {
    [[ -e ${PREFIX}/bin/lazygit ]] && return

    cd ${TEMP_FOLDER}

    LAZYGIT_VERSION=0.37.0
    mkdir lazygit-${LAZYGIT_VERSION}
    cd lazygit-${LAZYGIT_VERSION}
    [[ ! -e lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz
    tar xvzf lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz
    mkdir -p ${PREFIX}/bin
    mv lazygit ${PREFIX}/bin
}


function neovim () {
    [[ -e "${PREFIX}"/bin/neovim ]] && return

    # fuse

    # NVIM_VERSION=nightly
    # [[ ! -e "${PREFIX}"/bin/nvim ]] && wget -c -O "${PREFIX}"/bin/nvim https://ghproxy.com/https://github.com/neovim/neovim/releases/download/"${NVIM_VERSION}"/nvim.appimage
    # chmod 777 "${PREFIX}"/bin/nvim

    sudo apt-get install -y ninja-build gettext cmake unzip curl

    cd "${TEMP_FOLDER}"
    git clone git@git.zhlh6.cn:neovim/neovim.git
    cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX="${PREFIX}"/bin/neovim
    make install
}


function termscp () {
    [[ -e ${PREFIX}/bin/termscp ]] && return

    cd ${TEMP_FOLDER}

    TERMSCP_VERSION=v0.11.1
    [[ ! -e termscp-${TERMSCP_VERSION}-x86_64-unknown-linux-gnu.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/veeso/termscp/releases/download/${TERMSCP_VERSION}/termscp-${TERMSCP_VERSION}-x86_64-unknown-linux-gnu.tar.gz
    tar xzvf termscp-${TERMSCP_VERSION}-x86_64-unknown-linux-gnu.tar.gz
    mkdir -p ${PREFIX}/bin
    mv termscp ${PREFIX}/bin
}


function brew () {
    _ERR brew
    return
    # Judge if Linux or Mac
    OS="$(uname)"
    if [[ "$OS" == "Linux" ]]; then
      HOMEBREW_ON_LINUX=1
    elif [[ "$OS" != "Darwin" ]]; then
      echo "Homebrew 只运行在 Mac OS 或 Linux."
    fi

    # Set architecture information
    if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then
      #Mac
      if [[ "$UNAME_MACHINE" == "arm64" ]]; then
        #M1
        HOMEBREW_PREFIX="/opt/homebrew"
        HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}"
      else
        #Inter
        HOMEBREW_PREFIX="/usr/local"
        HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"
      fi
    else
      HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
      HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"
    fi

    if [[ ! -e ${HOMEBREW_REPOSITORY}/bin/brew ]]; then
      echo ""${NOTICE}": Start installing brew..."
      THIS=$(pwd)
      cd
      [[ -e ~/.zprofile ]] && mv ~/.zprofile ~/.zprofile_bak
      rm Homebrew.sh
      wget -c https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh
      sed -i 's/mirrors\.tuna\.tsinghua\.edu\.cn\\\/linuxbrew-bottles\\\/bottles-portable-ruby/mirrors.ustc.edu.cn\\\/linuxbrew-bottles\\\/bottles-portable-ruby/' Homebrew.sh
      sed -i 's/mirrors\.tuna\.tsinghua\.edu\.cn\\\/homebrew-bottles\\\/bottles-portable-ruby/mirrors.ustc.edu.cn\\\/homebrew-bottles\\\/bottles-portable-ruby/' Homebrew.sh
      bash Homebrew.sh
      rm Homebrew.sh
      if [[ -e ~/.zprofile && -e ~/.zprofile_bak ]]; then
        rm ~/.zprofile
        mv ~/.zprofile_bak ~/.zprofile
      fi
      cd "${THIS}"
    fi
}


function firacode () {
    [[ -e /usr/share/fonts/FiraCode ]] && return

    cd "${TEMP_FOLDER}"

    version=v3.0.2
    [[ ! -e FiraCode.zip ]] && wget -c https://ghproxy.com/https://github.com/ryanoasis/nerd-fonts/releases/download/${version}/FiraCode.zip
    unzip -d FiraCode FiraCode.zip
    sudo mv FiraCode /usr/share/fonts/
    sudo fc-cache -f -v
}


function fzf () {
    # [[ -e ${PREFIX}/bin/fzf ]] && return

    # FZF_VERSION=0.39.0
    # mkdir fzf-${FZF_VERSION}
    # cd fzf-${FZF_VERSION}
    # [[ ! -e fzf-${FZF_VERSION}-linux_amd64.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/junegunn/fzf/releases/download/${FZF_VERSION}/fzf-${FZF_VERSION}-linux_amd64.tar.gz
    # tar xvzf fzf-${FZF_VERSION}-linux_amd64.tar.gz
    # mkdir -p ${PREFIX}/bin
    # mv fzf ${PREFIX}/bin
    # cd ..

    cd
    git clone --depth=1 git@git.zhlh6.cn:junegunn/fzf.git ~/.fzf
    cd ~/.fzf
    sed -i 's/url=/url=https:\/\/ghproxy.com\//g' install
    ./install
}


function ants () {
    cd ${PREFIX}/bin
    mkdir -p ANTs
    cd ANTs
    [[ ! -e antsInstallExample ]] && git clone git@git.zhlh6.cn:cookpa/antsInstallExample.git
    cd antsInstallExample
    sed -i "17s/.*//; s/https:\/\/github.com\//git@git.zhlh6.cn:/g; 65s/.*/# sed -i \"s#https:\/\/github.com\/#git@git.zhlh6.cn:#g\; 7,13s#.*##; 1s#.*#return()#\" ..\/build\/ITKv5-prefix\/tmp\/ITKv5-gitclone.cmake\nsed -i \"1s#.*#return()#\" ..\/build\/ITKv5-prefix\/tmp\/ITKv5-gitclone.cmake\ngit clone --depth=1 git@git.zhlh6.cn:InsightSoftwareConsortium\/ITK.git ..\/build\/ITKv5\nsed -i \"s#\\\\\${git_protocol}:\/\/github.com\/#git@git.zhlh6.cn:#g\" ..\/build\/ITKv5\/Modules\/Remote\/MGHIO.remote.cmake ..\/build\/ITKv5\/Modules\/Remote\/AdaptiveDenoising.remote.cmake ..\/build\/ITKv5\/Modules\/Remote\/GenericLabelInterpolator.remote.cmake/g" installANTs.sh
    chmod 777 installANTs.sh
    cd ..
    ./antsInstallExample/installANTs.sh
}


function clash () {
    _ERR 'Clash not finished yet.'
    return

    [[ -e ${PREFIX}/bin/clash ]] && return
    cd ${TEMP_FOLDER}

    CLASH_VERSION=0.20.31
    [[ ! -e Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.31/Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz
    tar xzvf Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz
    return
    mv clash ${PREFIX}/bin/_lib-clash

    cd ${PREFIX}/bin/_lib-clash
    # curl https://update.glados-config.com/clash/151876/763d7e4/82122/glados-terminal.yaml > glados.yaml
    mv clash*64* clash
    chmod +x clash

    cd ..
    ln -s _lib-clash/clash_ .
}


function proxychains () {
    [[ -e ${PREFIX}/bin/proxychains4 ]] && return

    cd ${TEMP_FOLDER}

    PROXYCHAINS_VERSION=4.16
    [[ ! -e proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/rofl0r/proxychains-ng/releases/download/v${PROXYCHAINS_VERSION}/proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz
    tar xvf proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz
    cd proxychains-ng-${PROXYCHAINS_VERSION}
    ./configure --prefix=${PREFIX}
    make
    make install
    make clean

    cd ${PREFIX}/bin
}


function libxmu () {
    _ERR 'libxmu: no package xext found.'
    return

    LIBXMU_VERSION=1.1.3

    cd ${TEMP_FOLDER}

    [[ ! -e libxmu_${LIBXMU_VERSION}.orig.tar.gz ]] && wget -c https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/libx/libxmu/libxmu_${LIBXMU_VERSION}.orig.tar.gz
    tar xvzf libxmu_${LIBXMU_VERSION}.orig.tar.gz
    cd libXmu-${LIBXMU_VERSION}
    PKG_CONFIG_PATH="/usr/share/pkgconfig" \
    XMU_CFLAGS="-I/usr/include" \
    ./configure \
        --prefix=${PREFIX}
        # CPPFLAGS="-I/usr/include" \
        # CXXFLAGS="-I/usr/include" \
    make
    make install
    make clean
}


function xclip () {
    _ERR 'xclip need libxmu first.'
    return

    [[ -e ${PREFIX}/bin/xclip ]] && return

    cd ${TEMP_FOLDER}

    XCLIP_VERSION=0.13
    [[ ! -e xclip-${XCLIP_VERSION}.tar.gz ]] && wget -c -O xclip-${XCLIP_VERSION}.tar.gz https://github.com/astrand/xclip/archive/refs/tags/${XCLIP_VERSION}.tar.gz
    tar xvzf xclip-${XCLIP_VERSION}.tar.gz
    cd xclip-${XCLIP_VERSION}
    autoreconf
    CFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CPPFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CXXFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    ./configure \
        --prefix=${PREFIX}
    CFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CPPFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CXXFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    make
    make install
    make install.man
}


function lua () {
    [[ -e ${PREFIX}/bin/lua ]] && return

    cd ${TEMP_FOLDER}

    LUA_VERSION=v2.1
    [[ ! -e LuaJIT ]] && git clone git@git.zhlh6.cn:LuaJIT/LuaJIT.git -b "${LUA_VERSION}"
    cd LuaJIT
    make
    mv src/luajit "${PREFIX}"/bin/
}


function nvtop () {
    [[ -e "${PREFIX}"/bin/nvtop ]] && return

    NVTOP_VERSION=3.0.2
    [[ ! -e "${PREFIX}"/bin/nvtop ]] && wget -c -O "${PREFIX}"/bin/nvtop https://ghproxy.com/https://github.com/Syllo/nvtop/releases/download/"${NVTOP_VERSION}"/nvtop-x86_64.AppImage
    chmod 777 "${PREFIX}"/bin/nvtop
}


function chrome () {
    if command -v google-chrome &> /dev/null; then return; fi

    cd "${TEMP_FOLDER}"

    wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &&
    sudo dpkg -i google-chrome-stable_current_amd64.deb
    [[ -e google-chrome-stable_current_amd64.deb ]] && rm -f google-chrome-stable_current_amd64.deb

    TEMP="
[Desktop Entry]
Name=Google Chrome
Type=Application
Exec=/usr/bin/google-chrome
Icon=/usr/share/icons/hicolor/48x48/apps/google-chrome.png
"
    echo "${TEMP}" > ~/Desktop/chrome.desktop
    [[ ! -e /usr/share/applications/chrome.desktop ]] && sudo ln -s ~/Desktop/chrome.desktop /usr/share/applications
}


function gh () {
    [[ -e "${PREFIX}"/bin/github-desktop ]] && return

    GH_VERSION=3.3.1-linux1
    [[ ! -e "${PREFIX}"/bin/github-desktop ]] && wget -c -O "${PREFIX}"/bin/github-desktop https://ghproxy.com/https://github.com/shiftkey/desktop/releases/download/release-"${GH_VERSION}"/GitHubDesktop-linux-x86_64-"${GH_VERSION}".AppImage
    chmod 777 "${PREFIX}"/bin/github-desktop
    [[ ! -e "${PREFIX}"/bin/.github-desktop.png ]] && wget -c -O "${PREFIX}"/bin/.github-desktop.png https://avatars.githubusercontent.com/u/13171334

    TEMP="
[Desktop Entry]
Name=Github Desktop
Type=Application
Exec="${PREFIX}"/bin/github-desktop
Icon="${PREFIX}"/bin/.github-desktop.png
"
    echo "${TEMP}" > ~/Desktop/github-desktop.desktop
    [[ ! -e /usr/share/applications/github-desktop.desktop ]] && sudo ln -s ~/Desktop/github-desktop.desktop /usr/share/applications
}


function dosbox () {
    # NOTE: Don't use `command -v dosbox &> /dev/null` to check if dosbox has already been installed, beacuse the function name is `dosbox`, and is same with the command.
    [[ -e /usr/bin/dosbox ]] && return
    sudo apt install -y dosbox
    TEMP="
[Desktop Entry]
Name=Dosbox
Type=Application
Exec="${PREFIX}"/bin/_/dosbox
Icon=/usr/share/icons/hicolor/256x256/apps/dosbox.png
"
    echo "${TEMP}" > ~/Desktop/dosbox.desktop
    [[ -e /usr/share/applications/dosbox.desktop ]] && sudo rm /usr/share/applications/dosbox.desktop
    sudo ln -s ~/Desktop/dosbox.desktop /usr/share/applications
}


function wakatime () {
    mkdir -p ~/.wakatime/
    cd ~/.wakatime/

    [[ -e wakatime-cli ]] && rm -f wakatime-cli
    [[ -e wakatime-cli-linux-amd64 ]] && rm -f wakatime-cli-linux-amd64
    [[ -e wakatime-cli-linux-amd64.zip ]] && rm -f wakatime-cli-linux-amd64.zip

    WAKATIME_VERSION=v1.81.0

    wget -c https://ghproxy.com/https://github.com/wakatime/wakatime-cli/releases/download/"${WAKATIME_VERSION}"/wakatime-cli-linux-amd64.zip
    unzip wakatime-cli-linux-amd64.zip
    ln -s wakatime-cli-linux-amd64 wakatime-cli
}


function marksman () {
    [[ -e "${PREFIX}"/bin/marksman ]] && return

    MARKSMAN_VERSION=2023-07-25
    wget -c -O "${PREFIX}"/bin/marksman https://ghproxy.com/https://github.com/artempyanykh/marksman/releases/download/"${MARKSMAN_VERSION}"/marksman-linux-x64
    chmod 777 "${PREFIX}"/bin/marksman
}


function texlab () {
    [[ -e "${PREFIX}"/bin/texlab ]] && return

    cd ${TEMP_FOLDER}

    TEXLAB_VERSION=v5.9.2
    wget -c https://ghproxy.com/https://github.com/latex-lsp/texlab/releases/download/"${TEXLAB_VERSION}"/texlab-x86_64-linux.tar.gz
    tar xvf texlab-x86_64-linux.tar.gz
    mv texlab "${PREFIX}"/bin/
}


function coc_lua () {
    [[ -e ~/.config/coc/extensions/coc-sumneko-lua-data/sumneko-lua-ls/extension/server/bin/lua-language-server ]] && return

    cd ${TEMP_FOLDER}

    LUALS_VERSION=v3.7.0
    mkdir -p sumneko-lua-ls/
    cd sumneko-lua-ls/
    [[ ! -e vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix ]] && wget -c https://ghproxy.com/https://github.com/LuaLS/vscode-lua/releases/download/"${LUALS_VERSION}"/vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix
    unzip vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix
    cd ..
    [[ -e ~/.config/coc/extensions/coc-sumneko-lua-data/ ]] && rm -rf ~/.config/coc/extensions/coc-sumneko-lua-data/
    mkdir -p ~/.config/coc/extensions/coc-sumneko-lua-data/
    mv sumneko-lua-ls/ ~/.config/coc/extensions/coc-sumneko-lua-data/
}


function zathura () {
    _ERR zathura && return
    [[ -e "${PREFIX}"/bin/zathura ]] && return

    cd "${TEMP_FOLDER}"
    [[ ! -e zathura ]] && git clone git@git.zhlh6.cn:pwmt/zathura.git

    cd zathura

    # pip install meson ninja
    # sudo apt install libgtk-3-dev
    # sudo apt install libjson-glib-dev
    # sudo apt install libmagic-dev

    meson build --prefix="${PREFIX}"
    cd build
    ninja
    ninja install

    TEMP="
[Desktop Entry]
Name=Zathura
Type=Application
Exec="${PREFIX}"/bin/zathura
Icon="${PREFIX}"/share/icons/hicolor/256x256/apps/org.pwmt.zathura.png
"
    echo "${TEMP}" > ~/Desktop/zathura.desktop
    [[ -e /usr/share/applications/zathura.desktop ]] && sudo rm /usr/share/applications/zathura.desktop
    sudo ln -s ~/Desktop/zathura.desktop /usr/share/applications
}


function shfmt () {
    [[ -e "${PREFIX}"/bin/shfmt ]] && return

    SHFMT_VERSION=v3.7.0
    wget -c -O "${PREFIX}"/bin/shfmt https://ghproxy.com/https://github.com/mvdan/sh/releases/download/"${SHFMT_VERSION}"/shfmt_"${SHFMT_VERSION}"_linux_amd64
    chmod 777 "${PREFIX}"/bin/shfmt
}


function shellcheck () {
    [[ -e "${PREFIX}"/bin/shellcheck ]] && return

    cd "${TEMP_FOLDER}"

    mkdir -p shellcheck
    cd shellcheck

    SHELLCHECK_VERSION=v0.9.0
    [[ ! -e shellcheck-"${SHELLCHECK_VERSION}".linux.x86_64.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/koalaman/shellcheck/releases/download/"${SHELLCHECK_VERSION}"/shellcheck-"${SHELLCHECK_VERSION}".linux.x86_64.tar.xz
    tar xvf shellcheck-"${SHELLCHECK_VERSION}".linux.x86_64.tar.xz
    mv shellcheck-"${SHELLCHECK_VERSION}"/shellcheck "${PREFIX}"/bin/
}


function alacritty () {
    [[ -e "${PREFIX}"/bin/alacritty ]] && return

    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    rustup override set stable
    rustup update stable
    sudo apt install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3

    cd "${TEMP_FOLDER}"

    ALACRITTY_VERSION=v0.12.1
    git clone git@git.zhlh6.cn:alacritty/alacritty.git -b "${ALACRITTY_VERSION}"
    cd alacritty

    cargo build --release
    mv target/release/alacritty "${PREFIX}"/bin/
    wget -c -O ~/Desktop/Alacritty.desktop https://ghproxy.com/https://github.com/alacritty/alacritty/releases/download/"${ALACRITTY_VERSION}"/Alacritty.desktop
    sed -i 's/Exec=alacritty/Exec=\/home\/yusongli\/.vocal\/bin\/alacritty/g' ~/Desktop/Alacritty.desktop
    sudo ln -s ~/Desktop/Alacritty.desktop /usr/share/applications/
}


function nodejs () {
    [[ -e "${PREFIX}"/bin/nodejs ]] && return

    cd "${TEMP_FOLDER}"

    NODE_VERSION=v18.18.0
    wget -c https://nodejs.org/dist/"${NODE_VERSION}"/node-"${NODE_VERSION}"-linux-x64.tar.xz
    tar xvf node-"${NODE_VERSION}"-linux-x64.tar.xz
    mv node-"${NODE_VERSION}"-linux-x64/ "${PREFIX}"/bin/nodejs/
}


function trans () {
    TRANS_VERSION=0.9.7.1
    TARGET_FOLDER_NAME=translate-shell-"${TRANS_VERSION}"
    TARGET_FOLDER_PATH="${PREFIX}"/bin/"${TARGET_FOLDER_NAME}"/bin
    [[ -e "${TARGET_FOLDER_PATH}" ]] && return
    mkdir -p "${TARGET_FOLDER_PATH}"

    cd "${TEMP_FOLDER}"

    wget -c -O translate-shell-v"${TRANS_VERSION}".tar.gz https://ghproxy.com/https://github.com/soimort/translate-shell/archive/refs/tags/v"${TRANS_VERSION}".tar.gz
    tar xvf translate-shell-v"${TRANS_VERSION}".tar.gz
    mv translate-shell-"${TRANS_VERSION}"/* "${TARGET_FOLDER_PATH}"
    ln -s "${TARGET_FOLDER_PATH}"/translate "${TARGET_FOLDER_PATH}"/trans
}


function joshuto () {
    INSTALL_PREFIX="${PREFIX}"/bin \
    bash <(curl -s https://ghproxy.com/https://raw.githubusercontent.com/kamiyaa/joshuto/master/utils/install.sh | sed 's#ARCHIVE_URL="#ARCHIVE_URL="https://ghproxy.com/#g')
}


function kitty () {
    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
    [[ ! -e ~/.local/kitty.app ]] && return
    # Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in
    # your system-wide PATH)
    ln -s ~/.local/kitty.app/ ~/.vocal/bin/
    # Place the kitty.desktop file somewhere it can be found by the OS
    cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
    # sudo ln -s ~/.local/kitty.app/share/applications/kitty.desktop /usr/share/applications/
    # If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file
    cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/
    # sudo ln -s ~/.local/kitty.app/share/applications/kitty-open.desktop /usr/share/applications/
    # Update the paths to the kitty and its icon in the kitty.desktop file(s)
    sed -i "s|Icon=kitty|Icon=/home/$USER/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
    sed -i "s|Exec=kitty|Exec=/home/$USER/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
}


if [[ -z $1 ]]; then
    echo 'Please select an item to install:'
    echo ''

    # Get all function names in the script
    function_names=$(grep -E '^\s*function\s+' "$0" | awk '{print $2}' | grep -v '^_')

    # Print the function names
    for func_name in $function_names; do
      echo "$func_name"
    done
fi

while [[ ! -z $1 ]]; do
    eval "$1"
    shift
done

# cleanup
# rm -rf ${TEMP_FOLDER}
